### IMPORTANT ###

- fix "what to do" shutdown msg (resource_store.c)

- add render world and draw_world or sumth

- stop using strings, keep only hashes!

- remove union from Resource (just do void* + cast? perhaps with type enum or macro that takes type and does cast etc)

### LESS IMPORTANT ###

- magical central place where handle pools are registered with names and stuff and then we can give it a handle and it will tell us type and subtype information (with string names!!) from it. wow such types

- put renderer on own thread

- alpha support (something else than VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)

- rename shader.c and pipeline.c to ##-intermediate.c

- rewrite obj loader, its ugly

- make first-person flying camera (see avatar.lua)

- combine linux_main and linux_xcb_window into main_linux_xcb_vulkan

- make renderer askable about source type, i.e. have shader_default_fragment as source string, and append whatever renderer tells us to do... or maybe just have a source_spirv field and ask renderer which field to pull, like with a SHADER_LANGAUGE_TYPE enum in the renderer

- in shader in parser, error if > 1 shader of a type

- add library shader compiler or invoke commandline shader compiler (so we can use glsl)

- make some kind of resource thing, one corresponding to each resource on disk (shader, pipeline etc). remove the intermediate structs nad use those instead, pass them to renderer. have a central resource lut so files arent loaded twice. later maybe we make resource that is compiled into just a struct and then loaded quickly (i.e. shader resource -> compile -> shader -> renderer loads shader, not a shader resource)

- array: make array_internal_ensure_min_size func use array_internal_grow with capacity parameter