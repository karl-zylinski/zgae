{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"PhysicsR",
				"PhysicsResourceMesh"
			],
			[
				"get",
				"get_resource"
			],
			[
				"PhysiscRes",
				"PhysicsResourceHandle"
			],
			[
				"resou",
				"resources"
			],
			[
				"resu",
				"resources_num"
			],
			[
				"Phys",
				"PhysicsState"
			],
			[
				"ver",
				"vertices"
			],
			[
				"vertices",
				"vertices"
			],
			[
				"ob",
				"objects"
			],
			[
				"Physicsco",
				"PhysicsResourceCollider"
			],
			[
				"Colli",
				"PhysicsResourceCollider"
			],
			[
				"World",
				"PhysicsResourceWorld"
			],
			[
				"Physicsworld",
				"PhysicsResourceWorld"
			],
			[
				"Physics",
				"PhysicsResourceWorld"
			],
			[
				"cllider",
				"PhysicsResourceCollider"
			],
			[
				"resour",
				"resource_data"
			],
			[
				"Coll",
				"PhysicsResourceCollider"
			],
			[
				"PhyscsRes",
				"PhysicsResourceType"
			],
			[
				"PhysicsRes",
				"PhysicsResourceType"
			],
			[
				"Handle",
				"HandlePool"
			],
			[
				"PHysicsres",
				"PhysicsResourceHandle"
			],
			[
				"file",
				"filename"
			],
			[
				"Ph",
				"PhysicsState"
			],
			[
				"physi",
				"physics_world"
			],
			[
				"Physi",
				"PhysicsResourceHandle"
			],
			[
				"PHys",
				"PhysicsResourceHandle"
			],
			[
				"phys",
				"physics_world"
			],
			[
				"push",
				"push_constants"
			],
			[
				"push_con",
				"push_constants_num"
			],
			[
				"Render",
				"Renderer"
			],
			[
				"push_co",
				"push_constants_sizes"
			],
			[
				"push_",
				"push_constant_types"
			],
			[
				"push_Const",
				"push_constant_sizes"
			],
			[
				"push_c",
				"push_contants_num"
			],
			[
				"Shader",
				"ShaderType"
			],
			[
				"auto",
				"auto_val"
			],
			[
				"CB_AUTO",
				"CONSTANT_BUFFER_AUTO_VALUE_NONE"
			],
			[
				"constant_buffer",
				"constant_buffers_num"
			],
			[
				"TemALl",
				"TempAllocatorDataBlock"
			],
			[
				"Tem",
				"TempAllocatorData"
			],
			[
				"Temp",
				"TempAllocatorDataBlock"
			],
			[
				"ALLO",
				"ALLOCATOR_TYPE_TEMP"
			],
			[
				"Alloc",
				"Allocator"
			],
			[
				"Allocat",
				"AllocatorType"
			],
			[
				"RenderResou",
				"RenderResourceFlag"
			],
			[
				"mark",
				"marker_value"
			],
			[
				"resor",
				"resources_num"
			],
			[
				"num",
				"num_needed_resources"
			],
			[
				"Arr",
				"ArrayHeader"
			],
			[
				"inclu",
				"include_idx"
			],
			[
				"RenderResource",
				"RenderResourceType"
			],
			[
				"arr_mem",
				"arr_mem_move"
			],
			[
				"free",
				"free_object_indices"
			],
			[
				"RenderResu",
				"RenderResourceType"
			],
			[
				"handle",
				"handle_pool__borrow"
			],
			[
				"Renderres",
				"RenderResource"
			],
			[
				"Pipel",
				"PipelineRenderResource"
			],
			[
				"Keyco",
				"Keycode"
			],
			[
				"ine",
				"inline_test"
			],
			[
				"REnderREs",
				"RenderResourceHandle"
			],
			[
				"cam",
				"cam_pos"
			],
			[
				"pipe",
				"pipeline_handle"
			],
			[
				"obj",
				"obj"
			],
			[
				"RenderREs",
				"RenderResourceHandle"
			],
			[
				"arr_ob",
				"arr_objects"
			],
			[
				"arr_obj",
				"arr_free_objects"
			],
			[
				"arr_",
				"arr_free_objects"
			],
			[
				"REnder",
				"RenderResourceHandle"
			],
			[
				"Ren",
				"RenderResourceHandle"
			],
			[
				"RENDER",
				"RENDERER_RESOURCE_TYPE_GEOMETRY"
			],
			[
				"resource_hand",
				"resource_handle_pool"
			],
			[
				"RendererResource",
				"RendererResourceHandle"
			],
			[
				"Renderer",
				"RendererState"
			],
			[
				"arr",
				"arr_handle"
			],
			[
				"Resource",
				"ResourceHandle"
			],
			[
				"MAX",
				"HANDLE_MAX_GENERATION"
			],
			[
				"subty",
				"subtype_index"
			],
			[
				"pool",
				"pool_type_index"
			],
			[
				"H",
				"HandlePool"
			],
			[
				"tests",
				"tests_files"
			],
			[
				"vertex",
				"vertex_input_num"
			],
			[
				"constant",
				"constant_buffers"
			],
			[
				"fields",
				"fields_num"
			],
			[
				"consnt",
				"constant_buffers"
			],
			[
				"resource_destro",
				"resource_destroy_internal"
			],
			[
				"mapp",
				"mapping_get_idx"
			],
			[
				"RESOU",
				"RESOURCE_TYPE_PIPELINE"
			],
			[
				"Resour",
				"ResourceHandle"
			],
			[
				"shader_",
				"shader_handle"
			],
			[
				"ext",
				"existing"
			],
			[
				"g_",
				"g_mapping"
			],
			[
				"resource_type",
				"resource_type_from_str"
			],
			[
				"RenderRes",
				"RendererResourceHandle"
			],
			[
				"SHADER",
				"SHADER_CONSTANT_BUFFER_AUTO_VALUE_MAT_MODEL_VIEW_PROJECTION"
			],
			[
				"constant_buff",
				"constant_buffers_num"
			],
			[
				"cons",
				"constant_buffers_num"
			],
			[
				"pipel",
				"Pipeline"
			],
			[
				"mema_re",
				"mema_replicate"
			],
			[
				"pipelin",
				"pipeline_resource"
			],
			[
				"Pipeli",
				"PipelineResource"
			],
			[
				"shader_st",
				"shader_stages"
			],
			[
				"prese",
				"present_modes"
			],
			[
				"stat",
				"static_analysis"
			],
			[
				"out_",
				"out_position"
			],
			[
				"mvp",
				"mvp_matrix"
			],
			[
				"backend",
				"backend_state"
			],
			[
				"cbi",
				"cbi_idx"
			],
			[
				"ConstantBUffer",
				"ShaderConstantBufferItem"
			],
			[
				"con",
				"constant_buffer"
			],
			[
				"shader_stages",
				"shader_stages_num"
			],
			[
				"RendererRes",
				"RendererResourcePipeline"
			],
			[
				"camera",
				"camera_pos"
			],
			[
				"Geometr",
				"GeometryIndex"
			],
			[
				"PA",
				"PARSE_MODE_ONLY_VERTICES"
			],
			[
				"Geome",
				"GeometryIndex"
			],
			[
				"Geom",
				"GeometryVertex"
			],
			[
				"inc",
				"includes_at"
			],
			[
				"bui",
				"build_error"
			],
			[
				"org",
				"org_filelines"
			],
			[
				"org_F",
				"org_filelines"
			],
			[
				"org_",
				"org_fp"
			],
			[
				"sou",
				"source"
			],
			[
				"aut",
				"auto_value"
			],
			[
				"input_",
				"input_layout_num"
			],
			[
				"source",
				"source_flr"
			],
			[
				"file_load",
				"file_load_res_t"
			],
			[
				"file_",
				"file_load_res_t"
			],
			[
				"allo",
				"alloc_callstacks"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#include \"physics.h\"\n#include \"memory.h\"\n#include \"handle_hash_map.h\"\n#include \"handle_pool.h\"\n#include \"str.h\"\n#include \"debug.h\"\n#include \"handle.h\"\n#include \"path.h\"\n#include \"math.h\"\n#include \"dynamic_array.h\"\n#include \"time.h\"\n#include \"gjk_epa.h\"\n#include \"file.h\"\n#include \"jzon.h\"\n#include \"obj_loader.h\"\n\nstruct PhysicsResource\n{\n    hash64 name_hash;\n    PhysicsResourceHandle handle; // type is in the handle, get with handle_type(handle)\n    void* data;\n};\n\nstruct PhysicsState\n{\n    PhysicsResource* resources;\n    u32 resources_num;\n    HandleHashMap* resource_name_to_handle;\n    HandlePool* resource_handle_pool;\n    PhysicsPositionUpdateCallback position_update_callback;\n};\n\nstruct PhysicsResourceMesh\n{\n    Vec3* vertices;\n    u32 vertices_num;\n};\n\nstruct PhysicsResourceCollider\n{\n    PhysicsResourceHandle mesh;\n};\n\nstruct PhysicsWorldObject\n{\n    PhysicsResourceHandle collider;\n    RenderWorldObjectHandle render_handle;\n    Vec3 position;\n    Quat rotation;\n};\n\nstruct PhysicsResourceWorld\n{\n    PhysicsWorldObject* objects; // dynamic\n    u32* free_object_indices; // dynamic, holes in objects\n    RenderResourceHandle render_handle;\n};\n\nstatic const char* physics_resoruce_type_names[] =\n{\n    \"invalid\", \"mesh\", \"collider\", \"world\"\n};\n\n#define get_resource(t, h) ((t*)(ps->resources[handle_index(h)]).data)\n\nPhysicsState* physics_state_create(PhysicsPositionUpdateCallback position_update_callback)\n{\n    let ps = mema_zero_t(PhysicsState);\n\n    ps->resource_handle_pool = handle_pool_create(1, \"PhysicsResourceHandle\");\n    ps->resource_name_to_handle = handle_hash_map_create();\n    ps->position_update_callback = position_update_callback;\n\n    for (u32 s = 1; s < PHYSICS_RESOURCE_TYPE_NUM; ++s)\n        handle_pool_set_type(ps->resource_handle_pool, s, physics_resoruce_type_names[s]);\n\n    return ps;\n}\n\nstatic PhysicsResourceType resource_type_from_str(const char* str)\n{\n    i32 idx = str_eql_arr(str, physics_resoruce_type_names, sizeof(physics_resoruce_type_names)/sizeof(physics_resoruce_type_names[0]));\n    check(idx > 0 && idx < PHYSICS_RESOURCE_TYPE_NUM, \"Invalid physics resource type\");\n    return (PhysicsResourceType)idx;\n}\n\nstatic PhysicsResourceHandle add_resource(PhysicsState* ps, hash64 name_hash, PhysicsResourceType type, void* data)\n{\n    let handle = handle_pool_borrow(ps->resource_handle_pool, (u32)type);\n    u32 num_needed_resources = handle_index(handle) + 1;\n    if (num_needed_resources > ps->resources_num)\n    {\n        ps->resources = (PhysicsResource*)memra_zero_added(ps->resources, num_needed_resources * sizeof(PhysicsResource), ps->resources_num * sizeof(PhysicsResource));\n        ps->resources_num = num_needed_resources;\n    }\n    PhysicsResource* r = ps->resources + handle_index(handle);\n    memzero_p(r);\n    r->name_hash = name_hash;\n    r->handle = handle;\n    r->data = data;\n    return handle;\n}\n\nPhysicsResourceHandle physics_resource_load(PhysicsState* ps, const char* filename)\n{\n    let name_hash = str_hash(filename);\n    let existing = handle_hash_map_get(ps->resource_name_to_handle, name_hash);\n\n    if (existing != HANDLE_INVALID)\n        return existing;\n\n    const char* ext = path_ext(filename);\n    let type = resource_type_from_str(ext);\n    void* data = NULL;\n\n    switch(type)\n    {\n        case PHYSICS_RESOURCE_TYPE_MESH: {\n            FileLoadResult flr = file_load(filename, FILE_LOAD_MODE_NULL_TERMINATED);\n            check(flr.ok, \"Failed loading mesh from %s\", filename);\n            JzonParseResult jpr = jzon_parse((char*)flr.data);\n            check(jpr.ok && jpr.output.is_table, \"Outer object in %s isn't a table\", filename);\n            memf(flr.data);\n\n            let jz_source = jzon_get(jpr.output, \"source\");\n            check(jz_source && jz_source->is_string, \"%s doesn't contain source field\", filename);\n\n            let obj_vertices = obj_load_vertices(jz_source->string_val);\n            check(obj_vertices.ok, \"Failed loading obj specified by %s in %s\", jz_source->string_val, filename);\n            jzon_free(&jpr.output);\n\n            check(obj_vertices.ok, \"Failed loading mesh from file %s\", filename);\n\n            let m = mema_zero_t(PhysicsResourceMesh);\n            m->vertices = obj_vertices.vertices;\n            m->vertices_num = obj_vertices.vertices_num;\n            data = m;\n        } break;\n\n        default: error(\"Implement me!\");\n    }\n\n    return add_resource(ps, name_hash, type, data);\n}\n\nPhysicsResourceHandle physics_collider_create(PhysicsState* ps, PhysicsResourceHandle mesh)\n{\n    let c = mema_zero_t(PhysicsResourceCollider);\n    c->mesh = mesh;\n    return add_resource(ps, 0, PHYSICS_RESOURCE_TYPE_COLLIDER, c);\n}\n\nPhysicsResourceHandle physics_world_create(PhysicsState* ps, RenderResourceHandle render_handle)\n{\n    let w = mema_zero_t(PhysicsResourceWorld);\n    w->render_handle = render_handle;\n    return add_resource(ps, 0, PHYSICS_RESOURCE_TYPE_WORLD, w);\n}\n\nPhysicsWorldObjectHandle physics_world_add(PhysicsState* ps, PhysicsResourceHandle world, PhysicsResourceHandle collider, RenderWorldObjectHandle render_handle, const Vec3& pos, const Quat& rot)\n{\n    let w = get_resource(PhysicsResourceWorld, world);\n\n   if (da_num(w->free_object_indices) > 0)\n    {\n        u32 idx = da_pop(w->free_object_indices);\n        w->objects[idx].collider = collider;\n        w->objects[idx].position = pos;\n        w->objects[idx].rotation = rot;\n        return idx;\n    }\n\n    let h = da_num(w->objects);\n\n    PhysicsWorldObject wo = {\n        .collider = collider,\n        .position = pos,\n        .rotation = rot,\n        .render_handle = render_handle\n    };\n\n    da_push(w->objects, wo);\n    return h;\n}\n\nvoid physics_world_move(PhysicsState* ps, PhysicsResourceHandle world, PhysicsWorldObjectHandle obj, const Vec3& pos)\n{\n    let w = get_resource(PhysicsResourceWorld, world);\n    w->objects[obj].position += pos;\n    ps->position_update_callback(w->render_handle, w->objects[obj].render_handle, w->objects[obj].position, w->objects[obj].rotation);\n}\n\nvoid physics_world_set_position(PhysicsState* ps, PhysicsResourceHandle world, PhysicsWorldObjectHandle obj, const Vec3& pos, const Quat& rot)\n{\n    let w = get_resource(PhysicsResourceWorld, world);\n    w->objects[obj].position = pos;\n    w->objects[obj].rotation = rot;\n    ps->position_update_callback(w->render_handle, w->objects[obj].render_handle, pos, rot);\n}\n\nvoid physics_update_world(PhysicsState* ps, PhysicsResourceHandle world)\n{\n    let w = get_resource(PhysicsResourceWorld, world);\n    //float dt = time_dt();\n\n    for (u32 i = 0; i < da_num(w->objects); ++i)\n    {\n        if (!w->objects[i].collider)\n            continue;\n\n        let c1 = get_resource(PhysicsResourceCollider, w->objects[i].collider);\n        let p1 = w->objects[i].position;\n        //let r1 = w->objects[i].rotation;\n        let m1 = get_resource(PhysicsResourceMesh, c1->mesh);\n\n        GjkShape s1 = {\n            .vertices = mema_tn(Vec3, m1->vertices_num),\n            .vertices_num = m1->vertices_num\n        };\n\n        for (u32 vi = 0; vi < s1.vertices_num; ++vi)\n            s1.vertices[vi] = m1->vertices[vi] + p1;\n\n        for (u32 j = i + 1; j < da_num(w->objects); ++j)\n        {\n            if (!w->objects[j].collider)\n                continue;\n\n            let c2 = get_resource(PhysicsResourceCollider, w->objects[j].collider);\n            let p2 = w->objects[j].position;\n            //let r2 = w->objects[j].rotation;\n            let m2 = get_resource(PhysicsResourceMesh, c2->mesh);\n\n            GjkShape s2 = {\n                .vertices = mema_tn(Vec3, m2->vertices_num),\n                .vertices_num = m2->vertices_num\n            };\n\n            for (u32 vi = 0; vi < s2.vertices_num; ++vi)\n                s2.vertices[vi] = m2->vertices[vi] + p2;\n\n            let coll = gjk_epa_intersect_and_solve(s1, s2);\n\n            if (coll.colliding)\n                physics_world_move(ps, world, i, coll.solution);\n\n            memf(s2.vertices);\n        }\n\n        memf(s1.vertices);\n    }\n}\n\nstatic void destroy_resource(PhysicsState* ps, PhysicsResourceHandle h)\n{\n    switch(handle_type(h))\n    {\n        case PHYSICS_RESOURCE_TYPE_MESH: {\n            let m = get_resource(PhysicsResourceMesh, h);\n            memf(m-.\n        } break;\n    }\n\n    memf(ps->resources[handle_index(h)].data);\n    handle_pool_return(ps->resource_handle_pool, h);\n\n    if (ps->resources[handle_index(h)].name_hash)\n        handle_hash_map_remove(ps->resource_name_to_handle, ps->resources[handle_index(h)].name_hash);\n}\n\nvoid physics_state_destroy(PhysicsState* ps)\n{\n    for (u32 i = 0; i < ps->resources_num; ++i)\n        destroy_resource(ps, ps->resources[i].handle);\n\n    memf(ps->resources);\n    handle_hash_map_destroy(ps->resource_name_to_handle);\n    handle_pool_destroy(ps->resource_handle_pool);\n    memf(ps);\n}",
			"file": "physics.cpp",
			"file_size": 8749,
			"file_write_time": 132118225017376709,
			"settings":
			{
				"buffer_size": 8815,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "zgae",
	"build_system_choices":
	[
		[
			[
				[
					"zgae",
					""
				],
				[
					"zgae",
					"build and run"
				]
			],
			[
				"zgae",
				"build and run"
			]
		],
		[
			[
				[
					"zgae",
					""
				],
				[
					"zgae",
					"build and run"
				],
				[
					"zgae",
					"build and debug"
				],
				[
					"zgae",
					"static code analysis"
				],
				[
					"zgae",
					"build and run tests"
				]
			],
			[
				"zgae",
				"build and run"
			]
		],
		[
			[
				[
					"zgae",
					""
				],
				[
					"zgae",
					"build and run"
				],
				[
					"zgae",
					"static code analysis"
				]
			],
			[
				"zgae",
				"build and run"
			]
		],
		[
			[
				[
					"zgae",
					""
				],
				[
					"zgae",
					"build and run"
				],
				[
					"zgae",
					"static code analysis"
				],
				[
					"zgae",
					"build and run tests"
				]
			],
			[
				"zgae",
				"build and run"
			]
		]
	],
	"build_varint": "build and run",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"syntax spec",
				"Preferences: Settings – Syntax Specific"
			],
			[
				"UPP",
				"Convert Case: Upper Case"
			],
			[
				"upp",
				"Convert Case: Upper Case"
			],
			[
				"U",
				"Convert Case: Upper Case"
			],
			[
				"UPPER",
				"Convert Case: Upper Case"
			],
			[
				"pack",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"title case",
				"Convert Case: Title Case"
			],
			[
				"case",
				"Convert Case: Title Case"
			],
			[
				"upper",
				"Convert Case: Upper Case"
			],
			[
				"conver",
				"Convert Case: Upper Case"
			],
			[
				"package contrl",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/karl/Projects/zgae_c"
	],
	"file_history":
	[
		"/home/karl/Projects/zgae_c/linux_main.cpp",
		"/home/karl/Projects/zgae_c/physics_types.h",
		"/home/karl/Projects/zgae_c/renderer.h",
		"/home/karl/Projects/zgae_c/renderer.cpp",
		"/home/karl/Projects/zgae_c/math.h",
		"/home/karl/Projects/zgae_c/physics.h",
		"/home/karl/Projects/zgae_c/renderer_types.h",
		"/home/karl/Projects/zgae_c/physics.cpp",
		"/home/karl/Projects/zgae_c/gjk_epa.cpp",
		"/home/karl/Projects/zgae_c/linux_xcb_window.cpp",
		"/home/karl/Projects/zgae_c/window_types.h",
		"/home/karl/Projects/zgae_c/gjk_epa.h",
		"/home/karl/Projects/zgae_c/mesh_types.h",
		"/home/karl/Projects/zgae_c/obj_loader_types.h",
		"/home/karl/Projects/zgae_c/gjk_epa_types.h",
		"/home/karl/Projects/zgae_c/memory.h",
		"/home/karl/Projects/zgae_c/box.mesh",
		"/home/karl/Projects/zgae/physics.cpp",
		"/home/karl/Projects/zgae_c/obj_loader.h",
		"/home/karl/Projects/zgae_c/mesh.cpp",
		"/home/karl/Projects/zgae_c/mesh.h",
		"/home/karl/Projects/zgae_c/render_resource_types.h",
		"/home/karl/Projects/zgae_c/math.cpp",
		"/home/karl/Projects/zgae/math.cpp",
		"/home/karl/Projects/zgae_c/renderer_backend.h",
		"/home/karl/Projects/zgae_c/build.py",
		"/home/karl/Projects/zgae_c/renderer_backend_vulkan.cpp",
		"/home/karl/Projects/zgae_c/global_include.h",
		"/home/karl/Projects/zgae_c/dynamic_array.cpp",
		"/home/karl/Projects/zgae_c/shader_default_vertex.shader",
		"/home/karl/Projects/zgae_c/todo.txt",
		"/home/karl/Projects/zgae_c/jzon.h",
		"/home/karl/Projects/zgae_c/jzon.cpp",
		"/home/karl/Projects/zgae_c/pipeline_default.pipeline",
		"/home/karl/Projects/zgae_c/shader_default_vertex.glsl",
		"/home/karl/Projects/zgae_c/memory.cpp",
		"/home/karl/Projects/zgae_c/linux_xcb_window.h",
		"/home/karl/Projects/zgae_c/str.cpp",
		"/home/karl/Projects/zgae_c/path.h",
		"/home/karl/Projects/zgae_c/path.cpp",
		"/home/karl/Projects/zgae_c/str.h",
		"/home/karl/Projects/zgae_c/file.h",
		"/home/karl/Projects/zgae_c/obj_loader.cpp",
		"/home/karl/Projects/zgae_c/handle_hash_map.h",
		"/home/karl/Projects/zgae_c/handle_pool.h",
		"/home/karl/Projects/zgae_c/handle_pool.cpp",
		"/home/karl/Projects/zgae_c/handle_hash_map.cpp",
		"/home/karl/Projects/zgae_c/memory_types.h",
		"/home/karl/Projects/zgae_c/debug.h",
		"/home/karl/Projects/zgae_c/keyboard.cpp",
		"/home/karl/Projects/zgae_c/keycode_types.h",
		"/home/karl/Projects/zgae_c/debug.cpp",
		"/home/karl/Projects/zgae_c/math_types.h",
		"/home/karl/Projects/zgae_c/dynamic_array.h",
		"/home/karl/Projects/zgae_c/file.cpp",
		"/home/karl/Projects/zgae_c/keyboard.h",
		"/home/karl/Projects/zgae_c/render_resource.h",
		"/home/karl/Projects/zgae_c/debug_types.h",
		"/home/karl/Projects/zgae_c/handle.h",
		"/home/karl/Projects/zgae_c/zgae.sublime-project",
		"/home/karl/Projects/zgae_c/shader_default_vertex.spv",
		"/home/karl/Projects/zgae_c/jzon_types.h",
		"/home/karl/Projects/zgae_c/render_resource.cpp",
		"/home/karl/Projects/zgae_c/file_types.h",
		"/home/karl/Projects/lax/window_types.h",
		"/home/karl/Projects/lax/render_resource_types.h",
		"/home/karl/Projects/zgae_c/tests.cpp",
		"/home/karl/Projects/lax/array.h",
		"/home/karl/Projects/lax/obj_loader.c",
		"/home/karl/Projects/lax/array.c",
		"/home/karl/Desktop/old_arr.c",
		"/home/karl/Projects/zgae_c/math.c",
		"/home/karl/Projects/zgae_c/array.cpp",
		"/home/karl/Desktop/linux-master/code/handmade_world.h",
		"/home/karl/Desktop/linux-master/code/handmade_world_mode.h",
		"/home/karl/Desktop/linux-master/code/linux_sound.h",
		"/home/karl/Desktop/linux-master/code/win32_handmade.cpp",
		"/home/karl/Projects/zgae_c/optimize_incfwd.py",
		"/home/karl/Projects/zgae_c/array.h",
		"/home/karl/Desktop/linux-master/code/win32_handmade.h",
		"/home/karl/Desktop/linux-master/code/handmade_room_gen.h",
		"/home/karl/Desktop/linux-master/code/handmade_particles.cpp",
		"/home/karl/Desktop/linux-master/code/handmade_particles.h",
		"/home/karl/Desktop/linux-master/code/handmade_math.h",
		"/home/karl/Projects/zgae_c/tests.c",
		"/home/karl/Projects/zgae_c/gjk_epa.c",
		"/home/karl/Projects/zgae/key.h",
		"/home/karl/Desktop/build_time.txt",
		"/home/karl/tmp/test.cpp",
		"/home/karl/Desktop/ATLAS/include/atlas_tvec.h",
		"/home/karl/Projects/zgae/gjk_epa.cpp",
		"/home/karl/Projects/zgae_c/renderer.c",
		"/home/karl/Projects/zgae_c/obj_loader.c",
		"/home/karl/Projects/zgae_c/renderer_backend_vulkan.c",
		"/home/karl/Projects/zgae_c/render_resource.c",
		"/home/karl/Projects/zgae_c/tests",
		"/home/karl/Projects/zgae_c/zgae",
		"/home/karl/Projects/zgae_c/linux_main.c",
		"/home/karl/Projects/zgae/gjk_epa.h",
		"/home/karl/Projects/zgae_c/render_world_types.h",
		"/home/karl/Projects/zgae_c/handle_hash_map.c",
		"/home/karl/Projects/zgae_c/renderer_resource.c",
		"/home/karl/Projects/zgae_c/handle_pool.c",
		"/home/karl/Projects/zgae_c/memory.c",
		"/home/karl/Projects/zgae_c/renderer_resource_types.h",
		"/home/karl/Projects/zgae_c/renderer_resource.h",
		"/home/karl/Desktop/renderer_resouce_store.c",
		"/home/karl/Projects/zgae_c/renderer_resouce_store.c",
		"/home/karl/Projects/zgae_c/pipeline_resource_types.h",
		"/home/karl/Projects/zgae_c/shader_resource_types.h",
		"/home/karl/Projects/zgae_c/resource_types.h",
		"/home/karl/Projects/zgae_c/renderer_resource_store.h",
		"/home/karl/Projects/zgae_c/array.c",
		"/home/karl/Projects/zgae_c/.gitignore",
		"/home/karl/Projects/zgae_c/resource_store.c",
		"/home/karl/Projects/zgae_c/str.c",
		"/home/karl/Projects/zgae_c/shader_resource.c",
		"/home/karl/Projects/zgae_c/jzon.c",
		"/home/karl/Projects/zgae_c/resource_store.h",
		"/home/karl/Projects/zgae_c/shader_resource.h",
		"/home/karl/Projects/zgae_c/debug.c",
		"/home/karl/Projects/zgae_c/file.c",
		"/home/karl/Projects/zgae_c/gpu_types.h",
		"/home/karl/Projects/zgae_c/renderer_utils.h",
		"/home/karl/Projects/zgae_c/renderer_utils.c",
		"/home/karl/Projects/zgae_c/shader_default_fragment.glsl",
		"/home/karl/Projects/zgae_c/time.h",
		"/home/karl/Projects/zgae_c/path.c"
	],
	"find":
	{
		"height": 43.0
	},
	"find_in_files":
	{
		"height": 131.0,
		"where_history":
		[
			"*.cpp, *.h",
			"*.c, *.h",
			"",
			"sizet",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"rs",
			"pool",
			"rs",
			"_destroy",
			"model",
			"callback",
			"}\n",
			"1",
			"i",
			"olr",
			"object_",
			"free_object_indices",
			"type",
			"handle",
			"rs",
			"TYPE_MESH",
			"JZV ",
			"render_resource_type_names",
			"PhysicsResourceHandle",
			"PhysicsWorldObjectHandle",
			"position",
			"vkCmdBindDescriptorSets",
			"cler_values",
			"resource_load_parse_constant_buffer_field",
			"var",
			"push_const",
			"push_constant_fields_num",
			"push_contants_num",
			") ",
			"jz_push_constants",
			"push_constants",
			"pc_field_num",
			"cp_field_idx",
			"cb_field_idx",
			") ",
			"& ",
			") ",
			"& ",
			") ",
			"CR(",
			"descriptorSetCount",
			"resource_load_parse_constant_buffer_field",
			"&jpr.output",
			"able->",
			"jz_cbf_autoval",
			"jz_cbf",
			"SetLayoutCreate",
			"PoolCreateInfo",
			"constant_buffer_descriptor_sets",
			"vk_handle",
			"C(",
			"& ",
			"mema__repl",
			"h_alloc",
			"h",
			"heap_alloc",
			"mema",
			"vk_handle",
			"_pipeline",
			"pipeline",
			"descriptorset",
			"vkBind",
			"char* ",
			"->",
			"v2->",
			"v1->",
			"*",
			"pipeline->",
			"pr->",
			"->",
			"pr->",
			"&v",
			"&",
			"JzonValue* ",
			"->string_",
			"->is_",
			"jzon_get(&",
			"JzonValue* ",
			"C(",
			"SMALL_NU",
			"GJK_STATUS_COLLIDING",
			"m2.w",
			"renderer_backend_begin_frame",
			".vertices",
			"c(GjkShape",
			"c",
			"key_is_held",
			"KeyCode::",
			"(KeyCode::",
			"KeyCode::Num",
			"KeyCode::Unknown",
			"KeyCode::",
			"    ",
			"f.",
			"& ",
			"&",
			"& ",
			"const",
			"&",
			"const ",
			"num_vertices",
			"x",
			"f",
			"-",
			"x",
			"_random_colors",
			"array_destroy",
			"array_push",
			"EPAFace",
			"GjkStatus::",
			"GJKStatus",
			"GJKEPASolution",
			"GJKResult",
			"x ",
			"GJKShape",
			"GJKEPASolution",
			"& ",
			"typedef ",
			"typedef",
			"(RenderResourceType)",
			"(RenderResourceType)handle_type(h)",
			"(RenderResourceType)",
			"enum struct",
			"ShaderType::",
			"VertexInputValue::",
			"ConstantBufferAutoValue::",
			"ShaderDataType::",
			"RenderResourceType::"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"const ",
			"CR(",
			"",
			"u32",
			"",
			"m->",
			"JzonValue",
			"",
			"FileLoadMode::Default",
			"FileLoadMode::NullTerminated",
			"Renderer*",
			"RendererBackend*",
			"RendererState",
			"renderer_backend_",
			"RendererBackend",
			"RenderBackend",
			"renderer_backend",
			"renderer_surface_resized",
			"renderer_wait_for_new_frame",
			"renderer_update_constant_buffer",
			"renderer_present",
			"renderer_draw",
			"render_draw",
			"renderer_resource_load",
			"renderer_destroy",
			"renderer_create",
			"render",
			"RENDER",
			"Render",
			"renderer_backend_create_mesh",
			"renderer_backend_destroy_mesh",
			"RendererBackendMesh",
			"MeshIndex",
			"MeshVertex",
			"ShaderRendererResource",
			"PipelineRendererResource",
			"size_t",
			"Vec2u",
			"Vecu",
			"WindowOpenState",
			"WindowFocusLostCallback",
			"WindowResizedCallback",
			"WindowKeyReleasedCallback",
			"WindowKeyPressedCallback",
			"ShaderConstantBuffer",
			"ShaderInputLayoutItem",
			"ShaderInputLayoutValue",
			"ShaderConstantBufferItem",
			"ShaderConstantBufferAutoValue",
			"ShaderDataType",
			"ShaderType",
			"RendererBackendGeometry",
			"RendererBackendPipeline",
			"RendererBackendShader",
			"RendererBackendState",
			"ShaderIntermediate",
			"WindowType",
			"PipelineIntermediate",
			"RendererResourceHandle",
			"RendererState",
			"Color",
			"Vec4",
			"Vec3",
			"Vec2",
			"Quat",
			"Mat4",
			"WindowState",
			"xcb_connection_t",
			"WindowCallbacks",
			"XcbConnection",
			"XcbWindow",
			"KeyCode",
			"(f32",
			" f32 ",
			"JzonParseResult",
			"JzonValue",
			"i64",
			"i32",
			"i16",
			"i8",
			"u64",
			"u32",
			"u8",
			"sizet",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "physics.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8815,
						"regions":
						{
						},
						"selection":
						[
							[
								8233,
								8233
							]
						],
						"settings":
						{
							"auto_name": "",
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 5371.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "physics.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8815,
						"regions":
						{
						},
						"selection":
						[
							[
								5866,
								5866
							]
						],
						"settings":
						{
							"auto_name": "",
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 3102.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 31.0
	},
	"input":
	{
		"height": 45.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 600.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "zgae",
	"project": "zgae.sublime-project",
	"replace":
	{
		"height": 58.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"phys",
				"physics.cpp"
			],
			[
				"ph",
				"physics.h"
			],
			[
				"ren",
				"renderer.cpp"
			],
			[
				"physics",
				"physics.cpp"
			],
			[
				"math",
				"math.h"
			],
			[
				"rende",
				"renderer.h"
			],
			[
				"renere_ty",
				"renderer_types.h"
			],
			[
				"physi",
				"physics_types.h"
			],
			[
				"gjk",
				"gjk_epa.h"
			],
			[
				"obj",
				"obj_loader_types.h"
			],
			[
				"mesht",
				"mesh_types.h"
			],
			[
				"mesh",
				"mesh.cpp"
			],
			[
				"phy",
				"physics.h"
			],
			[
				"render",
				"renderer.cpp"
			],
			[
				"main",
				"linux_main.cpp"
			],
			[
				"mem",
				"memory.h"
			],
			[
				"me",
				"memory.h"
			],
			[
				"renderr_res",
				"render_resource_types.h"
			],
			[
				"box",
				"box.mesh"
			],
			[
				"rend",
				"renderer.h"
			],
			[
				"bui",
				"build.py"
			],
			[
				"globa",
				"global_include.h"
			],
			[
				"rendererba",
				"renderer_backend.h"
			],
			[
				"back",
				"renderer_backend.h"
			],
			[
				"bac",
				"renderer_backend.h"
			],
			[
				"renderer_back",
				"renderer_backend.h"
			],
			[
				"glo",
				"global_include.h"
			],
			[
				"vertex",
				"shader_default_vertex.shader"
			],
			[
				"verte",
				"shader_default_vertex.shader"
			],
			[
				"",
				"shader_default_vertex.glsl"
			],
			[
				"s",
				"shader_default_vertex.glsl"
			],
			[
				"backe",
				"renderer_backend_vulkan.cpp"
			],
			[
				"shader",
				"shader_default_vertex.shader"
			],
			[
				"jzon",
				"jzon.h"
			],
			[
				"pipe",
				"pipeline_default.pipeline"
			],
			[
				"global",
				"global_include.h"
			],
			[
				"str",
				"str.cpp"
			],
			[
				"math.cpp",
				"math.cpp"
			],
			[
				"gl",
				"global_include.h"
			],
			[
				"xcb",
				"linux_xcb_window.cpp"
			],
			[
				"glob",
				"global_include.h"
			],
			[
				"rend_ba",
				"renderer_backend.h"
			],
			[
				"keyb",
				"keyboard.h"
			],
			[
				"key",
				"keycode_types.h"
			],
			[
				"linux",
				"linux_main.cpp"
			],
			[
				"dyn",
				"dynamic_array.cpp"
			],
			[
				"MATH",
				"math.cpp"
			],
			[
				"arr",
				"dynamic_array.h"
			],
			[
				"FILE",
				"file_types.h"
			],
			[
				"RENDERRES",
				"render_resource_types.h"
			],
			[
				"ZGAE",
				"zgae.sublime-project"
			],
			[
				"glb",
				"global_include.h"
			],
			[
				"glba",
				"global_include.h"
			],
			[
				"dy",
				"dynamic_array.cpp"
			],
			[
				"REN",
				"renderer.cpp"
			],
			[
				"jz",
				"jzon.cpp"
			],
			[
				"tests",
				"tests.cpp"
			],
			[
				"vulk",
				"renderer_backend_vulkan.cpp"
			],
			[
				"lin",
				"linux_xcb_window.cpp"
			],
			[
				"li",
				"linux_main.cpp"
			],
			[
				"m",
				"math.cpp"
			],
			[
				"ma",
				"math.h"
			],
			[
				"handle",
				"handle_pool.cpp"
			],
			[
				"ath",
				"path.h"
			],
			[
				"todo",
				"todo.txt"
			],
			[
				"memo",
				"memory.h"
			],
			[
				"opt",
				"optimize_incfwd.py"
			],
			[
				"deb",
				"debug.cpp"
			],
			[
				"file",
				"file.cpp"
			],
			[
				"arra",
				"array.h"
			],
			[
				"bu",
				"build.py"
			],
			[
				"backend",
				"renderer_backend.h"
			],
			[
				"array",
				"array.cpp"
			],
			[
				"zgae",
				"zgae.sublime-project"
			],
			[
				"rendeer",
				"renderer_backend.h"
			],
			[
				"ar",
				"array.h"
			],
			[
				"ey",
				"keyboard.h"
			],
			[
				"windo",
				"window_types.h"
			],
			[
				"ky",
				"keycode_types.h"
			],
			[
				"keycod",
				"keycode_types.h"
			],
			[
				"test",
				"tests.c"
			],
			[
				"re",
				"renderer.h"
			],
			[
				"renderresou",
				"render_resource_types.h"
			],
			[
				"render_rse",
				"renderer_resource_types.h"
			],
			[
				"han",
				"handle_pool.h"
			],
			[
				"resou",
				"renderer_resource_types.h"
			],
			[
				"em",
				"memory.h"
			],
			[
				"hasdhma",
				"handle_hash_map.h"
			],
			[
				"resource store",
				"renderer_resouce_store.c"
			],
			[
				"memor",
				"memory.h"
			],
			[
				"resource",
				"resource_store.h"
			],
			[
				"git",
				".gitignore"
			],
			[
				"ha",
				"handle_pool.h"
			],
			[
				"res",
				"resource_store.c"
			],
			[
				"handlep",
				"handle_pool.h"
			],
			[
				"glboa",
				"global_include.h"
			],
			[
				"handl",
				"handle_pool.h"
			],
			[
				"tesst",
				"tests.c"
			],
			[
				"buil",
				"build.py"
			],
			[
				"gloab",
				"global_include.h"
			],
			[
				"resour",
				"resource_types.h"
			],
			[
				"resourc",
				"resource_store.c"
			],
			[
				"shae",
				"shader_resource.h"
			],
			[
				"de",
				"debug.c"
			],
			[
				"pipeline types",
				"pipeline_resource_types.h"
			],
			[
				"store.c",
				"resource_store.c"
			],
			[
				"pipelineres",
				"pipeline_resource_types.h"
			],
			[
				"types",
				"resource_types.h"
			],
			[
				"renderer",
				"renderer.c"
			],
			[
				"str.",
				"str.h"
			],
			[
				"hND",
				"handle_pool.h"
			],
			[
				"hand",
				"handle_pool.h"
			],
			[
				"poo",
				"handle_pool.h"
			],
			[
				"sha",
				"shader_resource.c"
			],
			[
				"pipeline",
				"pipeline_resource.c"
			],
			[
				"shader_res",
				"shader_resource.c"
			],
			[
				"pipeline_res",
				"pipeline_resource.h"
			],
			[
				"shader types",
				"shader_resource_types.h"
			],
			[
				"pip",
				"pipeline_resource_types.h"
			],
			[
				"shader.",
				"shader.c"
			],
			[
				"tod",
				"todo.txt"
			],
			[
				"toto",
				"todo.txt"
			],
			[
				"render_b",
				"renderer_backend_vulkan.c"
			],
			[
				"renderr",
				"renderer_backend.h"
			],
			[
				"objloader",
				"obj_loader_types.h"
			],
			[
				"opti",
				"optimize_includes.py"
			],
			[
				"geo",
				"geometry_types.h"
			],
			[
				"ol",
				"obj_loader_types.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 283.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
